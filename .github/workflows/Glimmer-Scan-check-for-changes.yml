import json
import os
import pathlib
import sqlite3
import urllib.request
import urllib.parse
import ssl
import re

def card_filename(card):
    parts = card["card_identifier"].replace("/", "_").split(" ")
    parts.reverse()
    return f"{'-'.join(parts)}.json"

def download_catalog():
    # Retrieve the token from the repository secret (already decrypted)
    token_auth = os.environ['LORCANA_SECRET_TOKEN'].strip()
    
    token_request = urllib.request.Request(
        "https://sso.ravensburger.de/token",
        data=urllib.parse.urlencode({"grant_type": "client_credentials"}).encode(),
        headers={"Authorization": token_auth, "User-Agent": ""}
    )
    
    with urllib.request.urlopen(token_request) as f:
        token = json.loads(f.read().decode("utf-8"))
    
    catalog_dir = pathlib.Path(__file__).parent / "catalog"
    catalog_dir.mkdir(exist_ok=True)
    
    for lang in ("de", "en", "fr", "it"):
        print(f"Downloading {lang} catalog")
        catalog_auth = f"{token['token_type']} {token['access_token']}"
        catalog_request = urllib.request.Request(
            f"https://api.lorcana.ravensburger.com/v2/catalog/{lang}",
            headers={"Authorization": catalog_auth, "User-Agent": ""}
        )
        with urllib.request.urlopen(catalog_request) as f:
            contents = json.loads(f.read().decode("utf-8"))
    
        lang_dir = catalog_dir / lang
        lang_dir.mkdir(exist_ok=True)
    
        cards_dir = lang_dir / "cards"
        cards_dir.mkdir(exist_ok=True)
    
        for card_type in contents["cards"]:
            card_type_dir = cards_dir / card_type
            card_type_dir.mkdir(exist_ok=True)
            for card in contents["cards"][card_type]:
                if "abilities" in card:
                    card["abilities"].sort()
                with (card_type_dir / card_filename(card)).open("w", encoding="utf-8") as out:
                    json.dump(card, out, indent=2, ensure_ascii=False)
    
        del contents["cards"]
        with (lang_dir / "catalog-no-cards.json").open("w", encoding="utf-8") as out:
            json.dump(contents, out, indent=2, ensure_ascii=False)

def extract_language_from_url(url):
    parsed = urllib.parse.urlparse(url)
    parts = parsed.path.split("/")
    if len(parts) > 2:
        return parts[2]
    return None

def process_catalog_and_update_db(catalog_dir, db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Create new table with the new schema, including fullName
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cards (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        magic_ink_colors TEXT,
        ink_convertible INTEGER,
        rarity TEXT,
        type TEXT,
        card_identifier TEXT,
        card_sets TEXT,
        number INTEGER,
        author TEXT,
        name TEXT,
        subtitle TEXT,
        fullName TEXT,
        ink_cost TEXT,
        quest_value TEXT,
        strength TEXT,
        willpower TEXT,
        flavor_text TEXT,
        rules_text TEXT,
        image_url TEXT
    )
    ''')
    conn.commit()
    
    for lang_dir in catalog_dir.iterdir():
        if lang_dir.is_dir():
            folder_language = lang_dir.name
            print(f"Processing folder: {folder_language}")
            cards_dir = lang_dir / "cards"
            if not cards_dir.exists():
                continue
            for category_dir in cards_dir.iterdir():
                if category_dir.is_dir() and category_dir.name in {"actions", "characters", "items", "locations"}:
                    card_type = category_dir.name
                    for json_file in category_dir.glob("*.json"):
                        try:
                            with json_file.open("r", encoding="utf-8") as f:
                                card = json.load(f)
                        except Exception as e:
                            print(f"Error reading {json_file}: {e}")
                            continue
                        
                        magic_ink_colors = json.dumps(card.get("magic_ink_colors", ""))
                        ink_convertible = 1 if card.get("ink_convertible", False) else 0
                        rarity = card.get("rarity", "")
                        card_identifier = card.get("card_identifier", "")
                        cs = card.get("card_sets", "")
                        if isinstance(cs, list):
                            try:
                                nums = [int(x) for x in cs if str(x).isdigit()]
                                card_sets_field = str(min(nums)) if nums else ""
                            except:
                                card_sets_field = ""
                        else:
                            try:
                                card_sets_field = str(int(cs))
                            except:
                                card_sets_field = cs
                        number_field = 0
                        if "/" in card_identifier:
                            num_part = card_identifier.split("/")[0]
                            if num_part.isdigit():
                                number_field = int(num_part)
                        else:
                            try:
                                number_field = int(card_identifier)
                            except:
                                number_field = 0
                        author = card.get("author", "")
                        name_field = card.get("name", "")
                        subtitle = card.get("subtitle", "")
                        # Create fullName as "name - subtitle"
                        fullName_field = name_field + " - " + subtitle
                        ink_cost = card.get("ink_cost", "")
                        quest_value = card.get("quest_value", "")
                        strength = card.get("strength", "")
                        willpower = card.get("willpower", "")
                        flavor_text = card.get("flavor_text", "")
                        rules_text = card.get("rules_text", "")
                        image_url_field = ""
                        if "image_urls" in card:
                            if isinstance(card["image_urls"], list):
                                for entry in card["image_urls"]:
                                    if isinstance(entry, dict) and entry.get("height") == 512 and "url" in entry:
                                        image_url_field = entry["url"]
                                        break
                            elif isinstance(card["image_urls"], dict):
                                for key, entry in card["image_urls"].items():
                                    if isinstance(entry, dict) and entry.get("height") == 512 and "url" in entry:
                                        image_url_field = entry["url"]
                                        break
    
                        detected_language = None
                        for candidate in [image_url_field]:
                            if candidate:
                                detected_language = extract_language_from_url(candidate)
                                if detected_language:
                                    break
                        if not detected_language:
                            detected_language = folder_language
    
                        cursor.execute('''
                            INSERT INTO cards (
                                magic_ink_colors, ink_convertible, rarity, type, card_identifier, card_sets, number,
                                author, name, subtitle, fullName, ink_cost, quest_value, strength, willpower, flavor_text, rules_text, image_url
                            ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
                        ''', (
                            magic_ink_colors, ink_convertible, rarity, card_type, card_identifier, card_sets_field, number_field,
                            author, name_field, subtitle, fullName_field, ink_cost, quest_value, strength, willpower, flavor_text, rules_text, image_url_field
                        ))
                        conn.commit()
                        
                        # Download images only for English catalog (for Thumbnails)
                        if folder_language == "en" and image_url_field:
                            # Determine chapter: if the part before "/" in card_identifier is numeric, use it; otherwise, 0.
                            chapter_str = card_identifier.split("/")[0] if "/" in card_identifier else card_identifier
                            chapter_num = int(chapter_str) if chapter_str.isdigit() else 0
                            
                            # Extract ImageID from image_url_field: the part between the last "/" and ".jpg"
                            parsed_url = urllib.parse.urlparse(image_url_field)
                            path_parts = parsed_url.path.split("/")
                            if path_parts:
                                last_part = path_parts[-1]
                                image_id = last_part.split(".jpg")[0] if ".jpg" in last_part else last_part
                            else:
                                image_id = "unknown"
                            
                            image_filename = f"{chapter_num}_{image_id}.jpg"
                            thumbnails_dir = pathlib.Path(__file__).parent / "Thumbnails"
                            thumbnails_dir.mkdir(exist_ok=True)
                            target_path = thumbnails_dir / image_filename
                            
                            req = urllib.request.Request(
                                image_url_field,
                                headers={"User-Agent": "Mozilla/5.0"}
                            )
                            try:
                                with urllib.request.urlopen(req) as response, open(target_path, "wb") as out_file:
                                    out_file.write(response.read())
                                print(f"Downloaded image for {card_identifier} to {target_path}")
                            except Exception as e:
                                print(f"Error downloading image for {card_identifier} from {image_url_field}: {e}")
    
    conn.close()
    print("Database update complete.")

def main():
    download_catalog()
    catalog_dir = pathlib.Path(__file__).parent / "catalog"
    db_path = pathlib.Path(__file__).parent / "cards_database.sqlite"
    process_catalog_and_update_db(catalog_dir, db_path)

if __name__ == "__main__":
    main()
