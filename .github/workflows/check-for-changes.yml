name: Sync & Release

on:
  workflow_dispatch:
  schedule:
    - cron: "8 * * * *"  # Run every hour at minute 8

jobs:
  update-catalog:
    runs-on: ubuntu-latest
    env:
      GIT_HTTP_TIMEOUT: 600

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # oder 0 für komplette Historie

      - name: Remove existing catalog, images and DB (if needed)
        run: |
          rm -rf catalog Images cards.db

      - name: Run sync script
        env:
          LORCANA_SECRET_TOKEN: ${{ secrets.LORCANA_SECRET_TOKEN }}
        run: python3 sync.py

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git config --global http.postBuffer 1073741824  # 1 GB
          git config --global core.compression 9
          git config --global http.version HTTP/1.1

      - name: Commit non-image changes (catalog and DB)
        run: |
          git reset --hard
          git pull --rebase
          git add catalog cards.db
          git commit -m "Update catalog and database" || echo "No non-image changes to commit"
          git push

      - name: Commit and push images per language
        run: |
          for lang in de en fr it; do
            echo "Processing language: $lang"
            git reset --hard
            git pull --rebase
            git add Images/$lang
            git commit -m "Update images for $lang" || echo "No changes for $lang"
            git push
          done

      - name: Check for new card changes
        id: card_changes
        shell: bash
        run: |
          set -euo pipefail

          # Bestimme eine sichere Diff-Range: entweder letzter Commit (HEAD~1..HEAD)
          # oder bei Erst-Commit ein Diff gegen den leeren Tree.
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            RANGE="HEAD~1..HEAD"
          else
            EMPTY_TREE=$(git hash-object -t tree /dev/null)
            RANGE="$EMPTY_TREE..HEAD"
          fi

          # Liste geänderte Karten-JSONs auf
          CHANGED=$(git diff --name-only $RANGE -- 'catalog/**/cards/*.json' || true)

          if [ -z "$CHANGED" ]; then
            echo "No new card changes detected."
            echo "new_cards=No new cards added." >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "New cards detected:"
          echo "$CHANGED"

          NEW_CARDS=""
          for file in $CHANGED; do
            if [ -f "$file" ]; then
              # Namen aus JSON ziehen (leer zulassen, falls Feld fehlt)
              name=$(jq -r '.name // empty' "$file" 2>/dev/null || true)
              if [ -n "$name" ]; then
                NEW_CARDS="${NEW_CARDS} - ${name}\n"
              fi
            fi
          done

          # Output für nachfolgende Steps bereitstellen
          printf "new_cards=%b" "$NEW_CARDS" >> "$GITHUB_OUTPUT"

      - name: Create release artifacts
        id: create_artifacts
        shell: bash
        run: |
          set -euo pipefail

          RELEASE_VERSION=$(date +'%Y%m%d-%H%M%S')
          echo "Release version: $RELEASE_VERSION"
          echo "version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

          # Removed Complete Bundle due to GitHub's 2GB limit.

          # Create zip for each language images
          for lang in de en fr it; do
            zip -r "Images_${lang}_${RELEASE_VERSION}.zip" "Images/$lang"
          done

          # Create zip for each image size across all languages (2048 and 512)
          for res in 2048 512; do
            mkdir -p "tmp_images_${res}"
            for lang in de en fr it; do
              if [ -d "Images/$lang/$res" ]; then
                mkdir -p "tmp_images_${res}/$lang"
                cp -r "Images/$lang/$res" "tmp_images_${res}/$lang/"
              fi
            done
            zip -r "Images_all_${res}_${RELEASE_VERSION}.zip" "tmp_images_${res}"
            rm -rf "tmp_images_${res}"
          done

          # Create zip for all foil_mask images across languages
          mkdir -p tmp_images_foil_mask
          for lang in de en fr it; do
            if [ -d "Images/$lang/foil_mask" ]; then
              mkdir -p "tmp_images_foil_mask/$lang"
              cp -r "Images/$lang/foil_mask" "tmp_images_foil_mask/$lang/"
            fi
          done
          zip -r "Images_all_foil_mask_${RELEASE_VERSION}.zip" "tmp_images_foil_mask"
          rm -rf "tmp_images_foil_mask"

          # Create zip for English low-res images and the database
          zip -r "EN_LowRes_DB_${RELEASE_VERSION}.zip" Images/en/512 cards.db

          # Create zip for just the database
          zip -r "Database_${RELEASE_VERSION}.zip" cards.db

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_artifacts.outputs.version }}
          release_name: "Release ${{ steps.create_artifacts.outputs.version }}"
          body: |
            **Release Summary:**
            Due to the 2GB limit on GitHub, the complete bundle is not provided as a release asset.
            Please use the GitHub-provided source code release attachment to download the full repository.
            The following release assets are provided:
            - **Per-Language Images:** Separate packages for images per language.
            - **Per-Size Images:** Packages for images across all languages by resolution.
            - **All Foil Masks:** A package containing all foil mask images across languages.
            - **EN Low-Res + DB:** English images at low resolution combined with the database.
            - **Database:** Database only.
            
            **New Cards Added:**
            ${{ steps.card_changes.outputs.new_cards }}
            
            This release was automatically generated because new cards have been made available.
          draft: false
          prerelease: false

      - name: Upload Release Assets - Per-Language Images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ steps.create_artifacts.outputs.version }}
          for lang in de en fr it; do
            echo "Uploading Images_${lang}_${RELEASE_VERSION}.zip"
            gh release upload "$RELEASE_VERSION" "Images_${lang}_${RELEASE_VERSION}.zip" --repo beingwortmann/lorcana-api
          done

      - name: Upload Release Assets - Per-Size Images (2048 & 512)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ steps.create_artifacts.outputs.version }}
          for res in 2048 512; do
            echo "Uploading Images_all_${res}_${RELEASE_VERSION}.zip"
            gh release upload "$RELEASE_VERSION" "Images_all_${res}_${RELEASE_VERSION}.zip" --repo beingwortmann/lorcana-api
          done

      - name: Upload Release Asset - All Foil Masks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ steps.create_artifacts.outputs.version }}
          echo "Uploading Images_all_foil_mask_${RELEASE_VERSION}.zip"
          gh release upload "$RELEASE_VERSION" "Images_all_foil_mask_${RELEASE_VERSION}.zip" --repo beingwortmann/lorcana-api

      - name: Upload Release Asset - EN LowRes + DB
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ steps.create_artifacts.outputs.version }}
          echo "Uploading EN_LowRes_DB_${RELEASE_VERSION}.zip"
          gh release upload "$RELEASE_VERSION" "EN_LowRes_DB_${RELEASE_VERSION}.zip" --repo beingwortmann/lorcana-api

      - name: Upload Release Asset - Database Only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_VERSION=${{ steps.create_artifacts.outputs.version }}
          echo "Uploading Database_${RELEASE_VERSION}.zip"
          gh release upload "$RELEASE_VERSION" "Database_${RELEASE_VERSION}.zip" --repo beingwortmann/lorcana-api